##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS :=

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := \
	ftrace_normal_fp_implementation \
	ftrace_no_specified_output_file \
	ftrace_replace_fp_ins_simple \
	ftrace_replace_fp_ins_complex \
	ftrace_function_level_replacement_simple \
	ftrace_function_level_replacement_nested \

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := ftrace

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := sse_sample_app

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS = $(FP_SELECTOR_REGISTRY_LIB_BASE)

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

%.test: export TEST           = test
%.test: EXPECTED_TOOL_OUTPUT  = tests/integration/$(@:.test=.reference)
%.test: EXPECTED_STDOUT       = tests/integration/$(@:.test=.stdout.reference)
%.test: ACTUAL_TOOL_OUTPUT    = $(@:.test=.out)
%.test: ACTUAL_STDOUT         = $(@:.test=.stdout.out)
%.test: FTRACE_TEST_FLAGS     = -print_fp_ops -o $(ACTUAL_TOOL_OUTPUT)
%.test: FTRACE_TOOL           = $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
%.test: TEST_APP              = $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
%.test: TEST_IMPL_LIB_SRC_DIR = tests/test_floating_point_implementations

%.test: $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(MAKE)
	$(PIN) -t $(FTRACE_TOOL) $(FTRACE_TEST_FLAGS) -- $(TEST_APP) > $(ACTUAL_STDOUT)
	$(DIFF) $(ACTUAL_TOOL_OUTPUT) $(EXPECTED_TOOL_OUTPUT)
	$(DIFF) $(ACTUAL_STDOUT) $(EXPECTED_STDOUT)
	$(RM) $(ACTUAL_TOOL_OUTPUT) $(ACTUAL_STDOUT)
	$(RM) $(FP_SELECTOR_REGISTRY_LIB)

ftrace_no_specified_output_file.test: FTRACE_TEST_FLAGS = -print_fp_ops
ftrace_no_specified_output_file.test: ACTUAL_TOOL_OUTPUT = ftrace.out

ftrace_replace_fp_ins_simple.test: FTRACE_TEST_FLAGS += -fp_selector_name test_simple

ftrace_replace_fp_ins_complex.test: FTRACE_TEST_FLAGS += -fp_selector_name test_complex

ftrace_function_level_replacement_simple.test: FTRACE_TEST_FLAGS += -fp_selector_name test_simple_function_level

ftrace_function_level_replacement_nested.test: FTRACE_TEST_FLAGS += -fp_selector_name test_nested_function_level

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

# Location of the shared library containing the fp selector registry
FP_SELECTOR_REGISTRY_LIB_BASE := ftrace_fp_selector_registry
FP_SELECTOR_REGISTRY_LIB := $(OBJDIR)$(DLL_PREFIX)$(FP_SELECTOR_REGISTRY_LIB_BASE)$(DLL_SUFFIX)

# Adds project-specific compiler flags
TOOL_CXXFLAGS += -MMD -MP -Isrc/

###### Special objects' build rules ######

PINTOOL_SRCS := $(notdir $(wildcard src/pintool/*.cpp))
REGISTRY_SRCS := $(notdir $(wildcard src/client_lib/registry/*.cpp))
REGISTRY_INTERNAL_SRCS := $(notdir $(wildcard src/client_lib/registry/internal/*.cpp))
FP_SELECTORS_SRCS := $(notdir $(wildcard src/client_lib/fp_selectors/*.cpp))
TEST_SRCS := $(notdir $(wildcard tests/*.cpp))

PINTOOL_OBJS := $(addprefix $(OBJDIR),$(PINTOOL_SRCS:.cpp=$(OBJ_SUFFIX)))
REGISTRY_OBJS := $(addprefix $(OBJDIR),$(REGISTRY_SRCS:.cpp=$(OBJ_SUFFIX)))
REGISTRY_INTERNAL_OBJS := $(addprefix $(OBJDIR),$(REGISTRY_INTERNAL_SRCS:.cpp=$(OBJ_SUFFIX)))
FP_SELECTORS_OBJS := $(addprefix $(OBJDIR),$(FP_SELECTORS_SRCS:.cpp=$(OBJ_SUFFIX)))
TEST_OBJS := $(addprefix $(OBJDIR),$(TEST_SRCS:.cpp=$(OBJ_SUFFIX)))

FTRACE_OBJS := $(PINTOOL_OBJS)
CLIENT_LIB_OBJS := $(REGISTRY_OBJS) $(REGISTRY_INTERNAL_OBJS) $(FP_SELECTORS_OBJS)

# Compiles pintool-specific sources
$(FTRACE_OBJS): $(OBJDIR)%$(OBJ_SUFFIX): src/pintool/%.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(REGISTRY_OBJS): $(OBJDIR)%$(OBJ_SUFFIX): src/client_lib/registry/%.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(DLL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(REGISTRY_INTERNAL_OBJS): $(OBJDIR)%$(OBJ_SUFFIX): src/client_lib/registry/internal/%.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(DLL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(FP_SELECTORS_OBJS): $(OBJDIR)%$(OBJ_SUFFIX): src/client_lib/fp_selectors/%.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(DLL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(TEST_OBJS): $(OBJDIR)%$(OBJ_SUFFIX): tests/%.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(DLL_CXXFLAGS) $(COMP_OBJ)$@ $<

# Tracks header dependencies for future recompilation
$(OBJDIR)%.d: %.cpp

-include $(OBJDIR)*.d

###### Special tools' build rules ######

$(OBJDIR)ftrace$(PINTOOL_SUFFIX): $(FTRACE_OBJS) $(FP_SELECTOR_REGISTRY_LIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

###### Special applications' build rules ######

# Instrumented application used in integration tests.
$(OBJDIR)sse_sample_app$(EXE_SUFFIX): tests/integration/test_app/sse_sample_app.c
	$(APP_CC) $(APP_CXXFLAGS_NOOPT) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS)

###### Special libraries' build rules ######

# Compiles a user library that can be used as a floating point implementation
# during instrumentation
$(FP_SELECTOR_REGISTRY_LIB): $(CLIENT_LIB_OBJS)
	$(APP_CXX) $(APP_CXXFLAGS) $(DLL_CXXFLAGS) -Wl,--hash-style=sysv $(COMP_EXE)$@ $^ $(APP_LDFLAGS) $(DLL_LDFLAGS) $(TOOL_LPATHS) $(TOOL_LIBS)

ifdef TEST

$(FP_SELECTOR_REGISTRY_LIB): $(TEST_OBJS)

endif

###### Special target rules ######

# Generates documentation
.PHONY: html
html: Doxyfile
	doxygen $^
