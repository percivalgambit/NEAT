##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################

##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := ftrace

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := ftrace_no_specified_output_file ftrace_no_instrument ftrace_replace_fp_ins_simple ftrace_replace_fp_ins_complex ftrace_no_replace

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := sse_sample_app

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### User-defined make variables ######
include ftrace.vars
#########################################

# function that takes in a list of variables and produces a filtered list of only
# variables that have a non-empty expansion
filter-defined = $(foreach var,$(1),$(if $($(var)),$(var) ))

# list of variables that are also flags to the C++ preprocessor for ftrace, if defined
FTRACE_CPP_MACRO_VARS := REPLACE_FP_FN REPLACEMENT_TYPE_FN START_CALLBACK EXIT_CALLBACK

# list of variables that are dependencies for the ftrace tool, if defined
FTRACE_TOOL_DEPS := REPLACE_FP_FILE REPLACEMENT_TYPE_FILE START_CALLBACK_FILE EXIT_CALLBACK_FILE

# filter out undefined variables from FTRACE_CPP_MACRO_VARS and FTRACE_TOOL_DEPS
FTRACE_CPP_MACRO_VARS := $(call filter-defined,$(FTRACE_CPP_MACRO_VARS))
FTRACE_TOOL_DEPS := $(call filter-defined,$(FTRACE_TOOL_DEPS))

##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

ftrace.test: $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) -o $(OBJDIR)ftrace.out -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) > $(OBJDIR)ftrace_stdout.out
	$(DIFF) -I "Total number of instructions: [0-9]*" $(OBJDIR)ftrace.out ftrace.reference
	$(DIFF) $(OBJDIR)ftrace_stdout.out ftrace_stdout.reference
	$(RM) $(OBJDIR)ftrace.out $(OBJDIR)ftrace_stdout.out

ftrace_no_specified_output_file.test: $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) > $(OBJDIR)ftrace_no_output_file_stdout.out 2> $(OBJDIR)ftrace_no_output_file_stderr.out
	$(DIFF) $(OBJDIR)ftrace_no_output_file_stdout.out ftrace_stdout.reference
	$(DIFF) $(OBJDIR)ftrace_no_output_file_stderr.out ftrace_no_instrument.reference
	$(RM) $(OBJDIR)ftrace_no_output_file_stdout.out $(OBJDIR)ftrace_no_output_file_stderr.out

ftrace_no_instrument.test: $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) -instrument 0 -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) > $(OBJDIR)ftrace_no_instrument_stdout.out 2> $(OBJDIR)ftrace_no_instrument_stderr.out
	$(DIFF) $(OBJDIR)ftrace_no_instrument_stdout.out ftrace_stdout.reference
	$(DIFF) $(OBJDIR)ftrace_no_instrument_stderr.out ftrace_no_instrument.reference
	$(RM) $(OBJDIR)ftrace_no_instrument_stderr.out $(OBJDIR)ftrace_no_instrument_stdout.out

ftrace_replace_fp_ins_simple.test: $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(MAKE) REPLACE_FP_FN=replace_fp_ins_simple $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) -o $(OBJDIR)ftrace_replace_fp_ins_simple.out -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) > $(OBJDIR)ftrace_replace_fp_ins_simple_stdout.out
	$(DIFF) -I "Total number of instructions: [0-9]*" $(OBJDIR)ftrace_replace_fp_ins_simple.out ftrace_replace_fp_ins_simple.reference
	$(DIFF) $(OBJDIR)ftrace_replace_fp_ins_simple_stdout.out ftrace_replace_fp_ins_simple_stdout.reference
	$(RM) $(OBJDIR)ftrace_replace_fp_ins_simple.out $(OBJDIR)ftrace_replace_fp_ins_simple_stdout.out $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(OBJDIR)ftrace$(OBJ_SUFFIX)

ftrace_replace_fp_ins_complex.test: $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(MAKE) REPLACE_FP_FN=replace_fp_ins_complex REPLACE_FP_FILE=replace_fp_ins_complex.cpp $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) -o $(OBJDIR)ftrace_replace_fp_ins_complex.out -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) > $(OBJDIR)ftrace_replace_fp_ins_complex_stdout.out
	$(DIFF) -I "Total number of instructions: [0-9]*" $(OBJDIR)ftrace_replace_fp_ins_complex.out ftrace_replace_fp_ins_complex.reference
	$(DIFF) $(OBJDIR)ftrace_replace_fp_ins_complex_stdout.out ftrace_replace_fp_ins_complex_stdout.reference
	$(RM) $(OBJDIR)ftrace_replace_fp_ins_complex.out $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(OBJDIR)ftrace$(OBJ_SUFFIX) $(OBJDIR)ftrace_replace_fp_ins_complex_stdout.out

ftrace_no_replace.test: $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(MAKE) REPLACE_FP_FN=replace_fp_ins_simple $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) -fp-replace 0 -o $(OBJDIR)ftrace_no_replace.out -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) > $(OBJDIR)ftrace_no_replace_stdout.out
	$(DIFF) -I "Total number of instructions: [0-9]*" $(OBJDIR)ftrace_no_replace.out ftrace.reference
	$(DIFF) $(OBJDIR)ftrace_no_replace_stdout.out ftrace_stdout.reference
	$(RM) $(OBJDIR)ftrace_no_replace.out $(OBJDIR)ftrace_no_replace_stdout.out $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(OBJDIR)ftrace$(OBJ_SUFFIX)

##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

FTRACE_CPP_FLAGS := $(foreach var,$(FTRACE_CPP_MACRO_VARS),-D$(var)=$($(var)) )

.PHONY: $(OBJDIR)ftrace$(OBJ_SUFFIX)
$(OBJDIR)ftrace$(OBJ_SUFFIX): ftrace.cpp ftrace.h
	$(CXX) $(FTRACE_CPP_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)ftrace$(PINTOOL_SUFFIX): $(OBJDIR)ftrace$(OBJ_SUFFIX) $(FTRACE_TOOL_DEPS)

###### Special applications' build rules ######

###### Special target rules ######

run: $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
ifndef PROG
	@echo "Please specify a PROG to instrument"
else
ifeq ($(shell cat /proc/sys/kernel/yama/ptrace_scope),1)
	$(PIN) -injection child -t $< -- $(PROG)
else
	$(PIN) -t $< -- $(PROG)
endif
endif

.PHONY: html
html: Doxyfile
	doxygen $^
