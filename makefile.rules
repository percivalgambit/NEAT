##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := ftrace

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS := ftrace_normal_fp_implementation ftrace_no_specified_output_file ftrace_no_instrument ftrace_replace_fp_ins_simple ftrace_replace_fp_ins_complex ftrace_replacement_type_simple ftrace_replacement_type_nested

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := sse_sample_app

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

%.test: EXPECTED_OUTPUT ?= tests/$(@:.test=.reference)
%.test: EXPECTED_STDOUT ?= tests/$(@:.test=.stdout.reference)
%.test: $(OBJDIR) $(OBJDIR)sse_sample_app$(EXE_SUFFIX)
	$(MAKE) $(FTRACE_CMD_VARS) $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
	$(PIN) -t $(OBJDIR)ftrace$(PINTOOL_SUFFIX) $(FTRACE_CMDLINE_FLAGS) \
	       -o $(OBJDIR)$(@:.test=.out) \
	       -- $(OBJDIR)sse_sample_app$(EXE_SUFFIX) \
	          > $(OBJDIR)$(@:.test=.stdout.out)
	$(DIFF) -I "Total number of instructions: [0-9]*" \
	        $(OBJDIR)$(@:.test=.out) \
	        $(EXPECTED_OUTPUT)
	$(DIFF) $(OBJDIR)$(@:.test=.stdout.out) $(EXPECTED_STDOUT)
	-$(RM) $(OBJDIR)$(@:.test=.out) $(OBJDIR)$(@:.test=.stdout.out)
	-$(RM) $(OBJDIR)function_level_replacement_type_enum.h \
	       $(OBJDIR)function_level_replacement_type_mapping.h


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

$(OBJDIR)%$(OBJ_SUFFIX): src/pintool/%.cpp | $(OBJDIR)
	$(CXX) $(TOOL_CXXFLAGS) -std=c++11 -Isrc/ $(COMP_OBJ)$@ $<

$(OBJDIR)ftrace$(PINTOOL_SUFFIX): $(OBJDIR)ftrace_main$(OBJ_SUFFIX) $(OBJDIR)ftrace$(OBJ_SUFFIX)
	 $(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

###### Special applications' build rules ######

$(OBJDIR)sse_sample_app$(EXE_SUFFIX): tests/test_app/sse_sample_app.c
	$(APP_CC) $(APP_CXXFLAGS_NOOPT) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS)

###### Special libraries' build rules ######

ifdef FLOATING_POINT_IMPL_LIB_SRCS

$(OBJDIR)$(DLL_PREFIX)%$(DLL_SUFFIX): $(FLOATING_POINT_IMPL_LIB_SRCS)
	$(APP_CXX) $(APP_CXXFLAGS) $(TOOL_CXXFLAGS) -std=c++11 -Isrc/ $(DLL_CXXFLAGS) $(COMP_EXE)$@ $^ $(APP_LDFLAGS) $(DLL_LDFLAGS) $(APP_LIBS)

else

$(OBJDIR)$(DLL_PREFIX)%$(DLL_SUFFIX):
	@echo "Please specify the space-separated list of sources used to build" \
	        "$@ in FLOATING_POINT_IMPL_LIB_SRCS"

endif

###### Special target rules ######

run: $(OBJDIR)ftrace$(PINTOOL_SUFFIX)
ifndef PROG
	@echo "Please specify a PROG to instrument"
else
ifeq ($(shell cat /proc/sys/kernel/yama/ptrace_scope),1)
	$(PIN) -injection child -t $< -o ftrace.out -- $(PROG)
else
	$(PIN) -t $< -o ftrace.out -- $(PROG)
endif
endif

.PHONY: html
html: Doxyfile
	doxygen $^
